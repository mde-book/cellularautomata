using kermeta::standard
using kermeta::exceptions
using ca::evaluator
using kermeta::io::StdIO => stdio


/* base part of the evaluator that doesn't require to use the Cell value to evaluate.
 * ie. the part that can be used in both as an initialisation expression or 
 */
package ca_rule{

	aspect class PopulationRange {
		operation matchesValue(val : Integer) : Boolean is do
			var lowerOk : Boolean := false
			var upperOk : Boolean := false
			
			if not lowerRange.isVoid then
				if val >= lowerRange then
					 lowerOk := true
				end
			else
				lowerOk := true
			end
			if not upperRange.isVoid then
				if val <= upperRange then
					 upperOk := true
				end
			else
				upperOk := true
			end
			result := lowerOk and upperOk
		end
	}


	aspect class Rule {
		operation evaluate(context : Context) : Integer is do
			// TODO add precodition checking that the current value is correct for the filter if it exists 
			result := nextValue.evaluate(context)
		end
	}
	
	aspect class IntegerExpression
	{
		operation evaluate(context : Context) : Integer is do 
			result := void
			raise NotImplementedException.new.initialize("evaluate not implemented for "+self.toString)
		end
	}
	
	aspect class IntegerLiteral inherits IntegerExpression
	{
		operation evaluate(context : Context) : Integer is do 
			result := self.~value
		end
	}
	
	aspect class CurrentCellPopulation inherits IntegerExpression{
		operation evaluate(context : Context) : Integer is do 
			result := context.currentCell.~value
		end
	}
	
	aspect class Conditional inherits IntegerExpression {
		operation evaluate(context : Context) : Integer is do 
			if condition.evaluate(context) != 0 then
				//stdio.writeln("Conditional != 0")
				result := ifTrueExpression.evaluate(context)
			else
				//stdio.writeln("Conditional == 0") 
				result := ifFalseExpression.evaluate(context)				
			end
			
				//stdio.writeln("\tConditional = "+result.toString) 
		end
	}
	
	/* 
	 * BinaryExpressions
	 */
	aspect class Add inherits BinaryExpression{
		operation evaluate(context : Context) : Integer is do
			result := left.evaluate(context) + right.evaluate(context)
		end
	}
	aspect class And inherits BinaryExpression{
		operation evaluate(context : Context) : Integer is do
			var leftVal : Boolean init  left.evaluate(context) != 0
			var rightVal : Boolean init right.evaluate(context) != 0
			result := if leftVal and rightVal then 1 else 0 end
		end
	}
	aspect class Div inherits BinaryExpression{
		operation evaluate(context : Context) : Integer is do
			result := left.evaluate(context) / right.evaluate(context)
		end
	}
	
	aspect class Equal inherits BinaryExpression{
		operation evaluate(context : Context) : Integer is do
			result := if left.evaluate(context) == right.evaluate(context) then 1 else 0 end
		end
	}
	aspect class Greater inherits BinaryExpression{
		operation evaluate(context : Context) : Integer is do
			result := if left.evaluate(context) > right.evaluate(context) then 1 else 0 end
		end
	}
	aspect class Lower inherits BinaryExpression{
		operation evaluate(context : Context) : Integer is do
			result := if left.evaluate(context) < right.evaluate(context) then 1 else 0 end
		end
	}
	aspect class Minus inherits BinaryExpression{
		operation evaluate(context : Context) : Integer is do
			result := left.evaluate(context) - right.evaluate(context)
		end
	}
	aspect class Mod inherits BinaryExpression{
		operation evaluate(context : Context) : Integer is do
			var leftVal : Integer init  left.evaluate(context)
			var rightVal : Integer init right.evaluate(context)
			//stdio.writeln(leftVal.toString +".mod("+rightVal.toString+")")
			result := leftVal.mod(rightVal)
		end
	}
	aspect class Mult inherits BinaryExpression{
		operation evaluate(context : Context) : Integer is do
			result := left.evaluate(context) * right.evaluate(context)
		end
	}
	
	
	
	aspect class Or inherits BinaryExpression{
		operation evaluate(context : Context) : Integer is do
			var leftVal : Boolean init  left.evaluate(context) != 0
			var rightVal : Boolean init right.evaluate(context) != 0
			result := if leftVal or rightVal then 1 else 0 end
		end
	}
	
	/* 
	 * UnaryExpressions
	 */
	aspect class Not inherits UnaryExpression{
		operation evaluate(context : Context) : Integer is do
			var targetVal : Boolean init  target.evaluate(context) != 0
			result := if targetVal then 1 else 0 end
		end
	}
	aspect class UMinus inherits UnaryExpression{
		operation evaluate(context : Context) : Integer is do
			//var targetVal : Boolean init  target.evaluate(context) != 0
			result := - target.evaluate(context)
		end
	}
	
	/* 
	 * NeighborsExpressions
	 */
	aspect class Max inherits NeighborsExpression{
		operation evaluate(context : Context) : Integer is do
			var selectedCellValues : Sequence[Integer]
			if neighborsFilter.isVoid then
				selectedCellValues := context.currentCell.neighbors.collect{ cell | cell.~value}
			else
				selectedCellValues := context.currentCell.neighbors.select{ cell | neighborsFilter.matchesValue(cell.~value)}.collect{ cell | cell.~value}
			end
			result := selectedCellValues.one
			selectedCellValues.each{ val | if val > result then result := val end } 
		end
	}
	aspect class Min inherits NeighborsExpression{
		operation evaluate(context : Context) : Integer is do
			var selectedCellValues : Sequence[Integer]
			if neighborsFilter.isVoid then
				selectedCellValues := context.currentCell.neighbors.collect{ cell | cell.~value}
			else
				selectedCellValues := context.currentCell.neighbors.select{ cell | neighborsFilter.matchesValue(cell.~value)}.collect{ cell | cell.~value}
			end
			result := selectedCellValues.one
			selectedCellValues.each{ val | if val < result then result := val end } 
		end
	}
	aspect class Size inherits NeighborsExpression{
		operation evaluate(context : Context) : Integer is do
			var selectedCells : OrderedSet[ca_vm::Cell]
			if neighborsFilter.isVoid then
				selectedCells := context.currentCell.neighbors
			else
				selectedCells := context.currentCell.neighbors.select{ cell | neighborsFilter.matchesValue(cell.~value)}.asOrderedSet
			end
			result := selectedCells.size
		end
	}
	aspect class Sum inherits NeighborsExpression{
		operation evaluate(context : Context) : Integer is do
			var selectedCellValues : Sequence[Integer]
			if neighborsFilter.isVoid then
				selectedCellValues := context.currentCell.neighbors.collect{ cell | cell.~value}
			else
				selectedCellValues := context.currentCell.neighbors.select{ cell | neighborsFilter.matchesValue(cell.~value)}.collect{ cell | cell.~value}
			end			
			var  sum : Integer := selectedCellValues.sum
			//stdio.writeln("Sum = "+sum.toString)
			result := sum			
		end
	}
	
	
}




