// automatically generated by Xtext
grammar org.kermeta.language.sample.cellularautomata.rules.cs.Rule with org.eclipse.xtext.common.Terminals 

import "platform:/resource/org.kermeta.language.sample.cellularautomata.rules.model/metamodel/rules.ecore" 

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

/*
 * Operators precedence (Corresponding rule):
 * 1	(), neighbors expressions	(NeighborsExpression)
 * 2	!,-							(UnaryExpression)
 * 3	*,/,%						(MultExpression)
 * 4	+,-							(AddExpression)
 * 5	==							(EqualExpression)
 * 6	<,>							(ComparisonExpression)
 * 7	&							(AndExpression)
 * 8	|							(OrExpression)
 * 9	if							(Conditional)
 */

CellularAutomata returns CellularAutomata:
	rules+=Rule+
;

Rule returns Rule:
	'rule' (filter=PopulationRange)? '=' nextVal= Conditional ';'
;

/*
 * Population range
 */
 
PopulationRange returns PopulationRange:
	{PopulationRange} '[' (lowerRange=EInt)? ',' (upperRange=EInt)? ']'
;

/*
 * Conditional
 */

Conditional returns IntegerExpression:
	OrExpression | {Conditional} 'if' condition=Conditional '{' ifTrueExpression=Conditional '}' 'else' '{' ifFalseExpression=Conditional '}'
;

/*
 * Binary expressions
 */

OrExpression returns IntegerExpression:
	AndExpression ( {Or.left=current} '|' right=AndExpression)*
;

AndExpression returns IntegerExpression:
	EqualExpression ( {And.left=current} '&' right=EqualExpression)*
;

EqualExpression returns IntegerExpression:
	ComparisonExpression ( {Equal.left=current} '==' right=ComparisonExpression)*
;

ComparisonExpression returns IntegerExpression:
	AddExpression ( ( ({Greater.left=current} '>')|({Lower.left=current}) '<') right=AddExpression)*
;

AddExpression returns IntegerExpression:
	MultExpression ( ( ({Add.left=current} '+')|({Minus.left=current} '-') ) right=MultExpression)*
;

MultExpression returns IntegerExpression:
	UnaryExpression ( ( ({Mult.left=current} '*')|({Div.left=current} '/')|({Mod.left=current} '%') ) right=UnaryExpression)*
;

/*
 * Unary expressions
 */

UnaryExpression returns IntegerExpression:
	NeighborsExpression | {Not} '!' target=NeighborsExpression| {UMinus} '-' target=NeighborsExpression
;
    
/*
 * Neighbors expressions
 */
    
NeighborsExpression returns IntegerExpression:
	'(' Conditional ')' | Max | Min | Sum | Size | IntegerLiteral | CurrentCellPopulation
;

Max returns Max:
	{Max}
	'neighborsMax' (neighborsFilter=PopulationRange)?;

Min returns Min:
	{Min}
	'neighborsMin' (neighborsFilter=PopulationRange)?;

Sum returns Sum:
	{Sum}
	'neighborsSum' (neighborsFilter=PopulationRange)?;

Size returns Size:
	{Size}
	'neighborsSize' (neighborsFilter=PopulationRange)?;

/*
 * Literals and terminals
 */

CurrentCellPopulation returns CurrentCellPopulation:
	{CurrentCellPopulation}
	'CurrentVal'
;

IntegerLiteral returns IntegerLiteral:
	val=EInt;

EInt returns ecore::EInt:
	'-'? INT;
