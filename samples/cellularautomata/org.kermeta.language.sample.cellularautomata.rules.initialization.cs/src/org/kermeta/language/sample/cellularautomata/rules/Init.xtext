// automatically generated by Xtext
grammar org.kermeta.language.sample.cellularautomata.rules.Init with org.kermeta.language.sample.cellularautomata.rules.Core

import "platform:/resource/org.kermeta.language.sample.cellularautomata.rules.initialization.model/metamodel/rules_init.ecore" 
import "platform:/resource/org.kermeta.language.sample.cellularautomata.geometry.model/metamodel/geometry.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.kermeta.language.sample.cellularautomata.rules.core.model/metamodel/rules_core.ecore" as core


/**
 * Root for Init
 */
 
CellularAutomataInitialization returns CellularAutomatatInitialization:
	{CellularAutomatatInitialization}
	(geometry=RegularGeometry)?
	seedRules+=Rule (seedRules+=Rule)*
;


/**
 * From Init
 */

Rule returns core::Rule:
	'where' (filter=GlobalPosition)? 'initValue' '=' '{' evaluatedVal=Conditional '}'
;

GlobalPosition returns GlobalPosition:
	{GlobalPosition}
	'{' coordinateRanges+=CoordinateRange ('x' (coordinateRanges+=CoordinateRange)?)* '}'
;

CoordinateRange returns CoordinateRange:
	'[' (lowerCoordinate =EInt) ',' (upperCoordinate =EInt) ']'
;

LiteralsExpression returns core::IntegerExpression:
	'(' Conditional ')' | PositionLiteral | IntegerLiteral
;


PositionLiteral returns core::IntegerExpression:
	{PositionLiteral}
	'positionOn''['dimensionIndex=EInt']'
;

/**
 * From Geometry
 */
RegularGeometry:
	{RegularGeometry}
	'regularGeometry' neighborsNumber=EInt '{'dimensions+=Dimension  ('x' dimensions+=Dimension)* '}' 
;

Dimension:
	{Dimension}
	(size=EInt) |   (isCircular?='(' size=EInt ')')
;

