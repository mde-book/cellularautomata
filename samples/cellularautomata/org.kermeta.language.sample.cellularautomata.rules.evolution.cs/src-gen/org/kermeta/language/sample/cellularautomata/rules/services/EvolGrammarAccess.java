/*
* generated by Xtext
*/

package org.kermeta.language.sample.cellularautomata.rules.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.kermeta.language.sample.cellularautomata.rules.services.CoreGrammarAccess;

@Singleton
public class EvolGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CellularAutomataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CellularAutomata");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCellularAutomataAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_1_0 = (RuleCall)cRulesAssignment_1.eContents().get(0);
		private final Assignment cRulesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRulesRuleParserRuleCall_2_0 = (RuleCall)cRulesAssignment_2.eContents().get(0);
		
		/// **
		//
		// * Root for Evol
		//
		// * / CellularAutomata:
		//
		//	{CellularAutomata} rules+=Rule rules+=Rule*;
		public ParserRule getRule() { return rule; }

		//{CellularAutomata} rules+=Rule rules+=Rule*
		public Group getGroup() { return cGroup; }

		//{CellularAutomata}
		public Action getCellularAutomataAction_0() { return cCellularAutomataAction_0; }

		//rules+=Rule
		public Assignment getRulesAssignment_1() { return cRulesAssignment_1; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_1_0() { return cRulesRuleParserRuleCall_1_0; }

		//rules+=Rule*
		public Assignment getRulesAssignment_2() { return cRulesAssignment_2; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_2_0() { return cRulesRuleParserRuleCall_2_0; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFilterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFilterPopulationRangeParserRuleCall_1_0 = (RuleCall)cFilterAssignment_1.eContents().get(0);
		private final Keyword cNextValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEvaluatedValAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEvaluatedValConditionalParserRuleCall_5_0 = (RuleCall)cEvaluatedValAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		/// **
		//
		// * From Evol
		//
		// * / Rule returns core::Rule:
		//
		//	"when" filter=PopulationRange? "nextValue" "=" "{" evaluatedVal=Conditional "}";
		public ParserRule getRule() { return rule; }

		//"when" filter=PopulationRange? "nextValue" "=" "{" evaluatedVal=Conditional "}"
		public Group getGroup() { return cGroup; }

		//"when"
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }

		//filter=PopulationRange?
		public Assignment getFilterAssignment_1() { return cFilterAssignment_1; }

		//PopulationRange
		public RuleCall getFilterPopulationRangeParserRuleCall_1_0() { return cFilterPopulationRangeParserRuleCall_1_0; }

		//"nextValue"
		public Keyword getNextValueKeyword_2() { return cNextValueKeyword_2; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//evaluatedVal=Conditional
		public Assignment getEvaluatedValAssignment_5() { return cEvaluatedValAssignment_5; }

		//Conditional
		public RuleCall getEvaluatedValConditionalParserRuleCall_5_0() { return cEvaluatedValConditionalParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class PopulationRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PopulationRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPopulationRangeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLowerRangeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLowerRangeEIntParserRuleCall_2_0 = (RuleCall)cLowerRangeAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUpperRangeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUpperRangeEIntParserRuleCall_4_0 = (RuleCall)cUpperRangeAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PopulationRange:
		//
		//	{PopulationRange} "[" lowerRange=EInt? "," upperRange=EInt? "]";
		public ParserRule getRule() { return rule; }

		//{PopulationRange} "[" lowerRange=EInt? "," upperRange=EInt? "]"
		public Group getGroup() { return cGroup; }

		//{PopulationRange}
		public Action getPopulationRangeAction_0() { return cPopulationRangeAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//lowerRange=EInt?
		public Assignment getLowerRangeAssignment_2() { return cLowerRangeAssignment_2; }

		//EInt
		public RuleCall getLowerRangeEIntParserRuleCall_2_0() { return cLowerRangeEIntParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//upperRange=EInt?
		public Assignment getUpperRangeAssignment_4() { return cUpperRangeAssignment_4; }

		//EInt
		public RuleCall getUpperRangeEIntParserRuleCall_4_0() { return cUpperRangeEIntParserRuleCall_4_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class LiteralsExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralsExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cConditionalParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cMaxParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMinParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSumParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSizeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCurrentCellPopulationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIntegerLiteralParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//LiteralsExpression returns core::IntegerExpression:
		//
		//	"(" Conditional ")" | Max | Min | Sum | Size | CurrentCellPopulation | IntegerLiteral;
		public ParserRule getRule() { return rule; }

		//"(" Conditional ")" | Max | Min | Sum | Size | CurrentCellPopulation | IntegerLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" Conditional ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Conditional
		public RuleCall getConditionalParserRuleCall_0_1() { return cConditionalParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//Max
		public RuleCall getMaxParserRuleCall_1() { return cMaxParserRuleCall_1; }

		//Min
		public RuleCall getMinParserRuleCall_2() { return cMinParserRuleCall_2; }

		//Sum
		public RuleCall getSumParserRuleCall_3() { return cSumParserRuleCall_3; }

		//Size
		public RuleCall getSizeParserRuleCall_4() { return cSizeParserRuleCall_4; }

		//CurrentCellPopulation
		public RuleCall getCurrentCellPopulationParserRuleCall_5() { return cCurrentCellPopulationParserRuleCall_5; }

		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_6() { return cIntegerLiteralParserRuleCall_6; }
	}

	public class MaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Max");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMaxAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNeighborsMaxKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNeighborsFilterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNeighborsFilterPopulationRangeParserRuleCall_2_0 = (RuleCall)cNeighborsFilterAssignment_2.eContents().get(0);
		
		/// *
		//
		// * Neighbors expressions
		//
		// * / Max:
		//
		//	{Max} "neighborsMax" neighborsFilter=PopulationRange?;
		public ParserRule getRule() { return rule; }

		//{Max} "neighborsMax" neighborsFilter=PopulationRange?
		public Group getGroup() { return cGroup; }

		//{Max}
		public Action getMaxAction_0() { return cMaxAction_0; }

		//"neighborsMax"
		public Keyword getNeighborsMaxKeyword_1() { return cNeighborsMaxKeyword_1; }

		//neighborsFilter=PopulationRange?
		public Assignment getNeighborsFilterAssignment_2() { return cNeighborsFilterAssignment_2; }

		//PopulationRange
		public RuleCall getNeighborsFilterPopulationRangeParserRuleCall_2_0() { return cNeighborsFilterPopulationRangeParserRuleCall_2_0; }
	}

	public class MinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Min");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMinAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNeighborsMinKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNeighborsFilterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNeighborsFilterPopulationRangeParserRuleCall_2_0 = (RuleCall)cNeighborsFilterAssignment_2.eContents().get(0);
		
		//Min:
		//
		//	{Min} "neighborsMin" neighborsFilter=PopulationRange?;
		public ParserRule getRule() { return rule; }

		//{Min} "neighborsMin" neighborsFilter=PopulationRange?
		public Group getGroup() { return cGroup; }

		//{Min}
		public Action getMinAction_0() { return cMinAction_0; }

		//"neighborsMin"
		public Keyword getNeighborsMinKeyword_1() { return cNeighborsMinKeyword_1; }

		//neighborsFilter=PopulationRange?
		public Assignment getNeighborsFilterAssignment_2() { return cNeighborsFilterAssignment_2; }

		//PopulationRange
		public RuleCall getNeighborsFilterPopulationRangeParserRuleCall_2_0() { return cNeighborsFilterPopulationRangeParserRuleCall_2_0; }
	}

	public class SumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSumAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNeighborsSumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNeighborsFilterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNeighborsFilterPopulationRangeParserRuleCall_2_0 = (RuleCall)cNeighborsFilterAssignment_2.eContents().get(0);
		
		//Sum:
		//
		//	{Sum} "neighborsSum" neighborsFilter=PopulationRange?;
		public ParserRule getRule() { return rule; }

		//{Sum} "neighborsSum" neighborsFilter=PopulationRange?
		public Group getGroup() { return cGroup; }

		//{Sum}
		public Action getSumAction_0() { return cSumAction_0; }

		//"neighborsSum"
		public Keyword getNeighborsSumKeyword_1() { return cNeighborsSumKeyword_1; }

		//neighborsFilter=PopulationRange?
		public Assignment getNeighborsFilterAssignment_2() { return cNeighborsFilterAssignment_2; }

		//PopulationRange
		public RuleCall getNeighborsFilterPopulationRangeParserRuleCall_2_0() { return cNeighborsFilterPopulationRangeParserRuleCall_2_0; }
	}

	public class SizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Size");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSizeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNeighborsSizeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNeighborsFilterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNeighborsFilterPopulationRangeParserRuleCall_2_0 = (RuleCall)cNeighborsFilterAssignment_2.eContents().get(0);
		
		//Size:
		//
		//	{Size} "neighborsSize" neighborsFilter=PopulationRange?;
		public ParserRule getRule() { return rule; }

		//{Size} "neighborsSize" neighborsFilter=PopulationRange?
		public Group getGroup() { return cGroup; }

		//{Size}
		public Action getSizeAction_0() { return cSizeAction_0; }

		//"neighborsSize"
		public Keyword getNeighborsSizeKeyword_1() { return cNeighborsSizeKeyword_1; }

		//neighborsFilter=PopulationRange?
		public Assignment getNeighborsFilterAssignment_2() { return cNeighborsFilterAssignment_2; }

		//PopulationRange
		public RuleCall getNeighborsFilterPopulationRangeParserRuleCall_2_0() { return cNeighborsFilterPopulationRangeParserRuleCall_2_0; }
	}

	public class CurrentCellPopulationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CurrentCellPopulation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCurrentCellPopulationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCurrentValueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CurrentCellPopulation returns core::IntegerExpression:
		//
		//	{CurrentCellPopulation} "CurrentValue";
		public ParserRule getRule() { return rule; }

		//{CurrentCellPopulation} "CurrentValue"
		public Group getGroup() { return cGroup; }

		//{CurrentCellPopulation}
		public Action getCurrentCellPopulationAction_0() { return cCurrentCellPopulationAction_0; }

		//"CurrentValue"
		public Keyword getCurrentValueKeyword_1() { return cCurrentValueKeyword_1; }
	}
	
	
	private CellularAutomataElements pCellularAutomata;
	private RuleElements pRule;
	private PopulationRangeElements pPopulationRange;
	private LiteralsExpressionElements pLiteralsExpression;
	private MaxElements pMax;
	private MinElements pMin;
	private SumElements pSum;
	private SizeElements pSize;
	private CurrentCellPopulationElements pCurrentCellPopulation;
	
	private final Grammar grammar;

	private CoreGrammarAccess gaCore;

	@Inject
	public EvolGrammarAccess(GrammarProvider grammarProvider,
		CoreGrammarAccess gaCore) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaCore = gaCore;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.kermeta.language.sample.cellularautomata.rules.Evol".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public CoreGrammarAccess getCoreGrammarAccess() {
		return gaCore;
	}

	
	/// **
	//
	// * Root for Evol
	//
	// * / CellularAutomata:
	//
	//	{CellularAutomata} rules+=Rule rules+=Rule*;
	public CellularAutomataElements getCellularAutomataAccess() {
		return (pCellularAutomata != null) ? pCellularAutomata : (pCellularAutomata = new CellularAutomataElements());
	}
	
	public ParserRule getCellularAutomataRule() {
		return getCellularAutomataAccess().getRule();
	}

	/// **
	//
	// * From Evol
	//
	// * / Rule returns core::Rule:
	//
	//	"when" filter=PopulationRange? "nextValue" "=" "{" evaluatedVal=Conditional "}";
	public RuleElements getRuleAccess() {
		return (pRule != null) ? pRule : (pRule = new RuleElements());
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//PopulationRange:
	//
	//	{PopulationRange} "[" lowerRange=EInt? "," upperRange=EInt? "]";
	public PopulationRangeElements getPopulationRangeAccess() {
		return (pPopulationRange != null) ? pPopulationRange : (pPopulationRange = new PopulationRangeElements());
	}
	
	public ParserRule getPopulationRangeRule() {
		return getPopulationRangeAccess().getRule();
	}

	//LiteralsExpression returns core::IntegerExpression:
	//
	//	"(" Conditional ")" | Max | Min | Sum | Size | CurrentCellPopulation | IntegerLiteral;
	public LiteralsExpressionElements getLiteralsExpressionAccess() {
		return (pLiteralsExpression != null) ? pLiteralsExpression : (pLiteralsExpression = new LiteralsExpressionElements());
	}
	
	public ParserRule getLiteralsExpressionRule() {
		return getLiteralsExpressionAccess().getRule();
	}

	/// *
	//
	// * Neighbors expressions
	//
	// * / Max:
	//
	//	{Max} "neighborsMax" neighborsFilter=PopulationRange?;
	public MaxElements getMaxAccess() {
		return (pMax != null) ? pMax : (pMax = new MaxElements());
	}
	
	public ParserRule getMaxRule() {
		return getMaxAccess().getRule();
	}

	//Min:
	//
	//	{Min} "neighborsMin" neighborsFilter=PopulationRange?;
	public MinElements getMinAccess() {
		return (pMin != null) ? pMin : (pMin = new MinElements());
	}
	
	public ParserRule getMinRule() {
		return getMinAccess().getRule();
	}

	//Sum:
	//
	//	{Sum} "neighborsSum" neighborsFilter=PopulationRange?;
	public SumElements getSumAccess() {
		return (pSum != null) ? pSum : (pSum = new SumElements());
	}
	
	public ParserRule getSumRule() {
		return getSumAccess().getRule();
	}

	//Size:
	//
	//	{Size} "neighborsSize" neighborsFilter=PopulationRange?;
	public SizeElements getSizeAccess() {
		return (pSize != null) ? pSize : (pSize = new SizeElements());
	}
	
	public ParserRule getSizeRule() {
		return getSizeAccess().getRule();
	}

	//CurrentCellPopulation returns core::IntegerExpression:
	//
	//	{CurrentCellPopulation} "CurrentValue";
	public CurrentCellPopulationElements getCurrentCellPopulationAccess() {
		return (pCurrentCellPopulation != null) ? pCurrentCellPopulation : (pCurrentCellPopulation = new CurrentCellPopulationElements());
	}
	
	public ParserRule getCurrentCellPopulationRule() {
		return getCurrentCellPopulationAccess().getRule();
	}

	/// *
	//
	// * Conditional
	//
	// * / Conditional returns IntegerExpression:
	//
	//	OrExpression | {Conditional} "if" condition=Conditional "{" ifTrueExpression=Conditional "}" "else" "{"
	//
	//	ifFalseExpression=Conditional "}";
	public CoreGrammarAccess.ConditionalElements getConditionalAccess() {
		return gaCore.getConditionalAccess();
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}

	/// *
	//
	// * Binary expressions
	//
	// * / OrExpression returns IntegerExpression:
	//
	//	AndExpression ({Or.left=current} "|" right=AndExpression)*;
	public CoreGrammarAccess.OrExpressionElements getOrExpressionAccess() {
		return gaCore.getOrExpressionAccess();
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//AndExpression returns IntegerExpression:
	//
	//	EqualExpression ({And.left=current} "&" right=EqualExpression)*;
	public CoreGrammarAccess.AndExpressionElements getAndExpressionAccess() {
		return gaCore.getAndExpressionAccess();
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//EqualExpression returns IntegerExpression:
	//
	//	ComparisonExpression ({Equal.left=current} "==" right=ComparisonExpression)*;
	public CoreGrammarAccess.EqualExpressionElements getEqualExpressionAccess() {
		return gaCore.getEqualExpressionAccess();
	}
	
	public ParserRule getEqualExpressionRule() {
		return getEqualExpressionAccess().getRule();
	}

	//ComparisonExpression returns IntegerExpression:
	//
	//	AddExpression (({Greater.left=current} ">" | {Lower.left=current} "<") right=AddExpression)*;
	public CoreGrammarAccess.ComparisonExpressionElements getComparisonExpressionAccess() {
		return gaCore.getComparisonExpressionAccess();
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}

	//AddExpression returns IntegerExpression:
	//
	//	MultExpression (({Add.left=current} "+" | {Minus.left=current} "-") right=MultExpression)*;
	public CoreGrammarAccess.AddExpressionElements getAddExpressionAccess() {
		return gaCore.getAddExpressionAccess();
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}

	//MultExpression returns IntegerExpression:
	//
	//	UnaryExpression (({Mult.left=current} "*" | {Div.left=current} "/" | {Mod.left=current} "%") right=UnaryExpression)*;
	public CoreGrammarAccess.MultExpressionElements getMultExpressionAccess() {
		return gaCore.getMultExpressionAccess();
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}

	/// *
	//
	// * Unary expressions
	//
	// * / UnaryExpression returns IntegerExpression:
	//
	//	LiteralsExpression | {Not} "!" target=LiteralsExpression | {UMinus} "-" target=LiteralsExpression;
	public CoreGrammarAccess.UnaryExpressionElements getUnaryExpressionAccess() {
		return gaCore.getUnaryExpressionAccess();
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//IntegerLiteral:
	//
	//	val=EInt;
	public CoreGrammarAccess.IntegerLiteralElements getIntegerLiteralAccess() {
		return gaCore.getIntegerLiteralAccess();
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//
	//	"-"? INT;
	public CoreGrammarAccess.EIntElements getEIntAccess() {
		return gaCore.getEIntAccess();
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaCore.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaCore.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaCore.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaCore.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaCore.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaCore.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaCore.getANY_OTHERRule();
	} 
}
