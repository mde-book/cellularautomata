 // automatically generated by Xtext
grammar org.kermeta.language.sample.cellularautomata.rules.Init with org.kermeta.language.sample.cellularautomata.rules.Core

import "platform:/resource/org.kermeta.language.sample.cellularautomata.rules.initialization.model/metamodel/rules_init.ecore" 
import "platform:/resource/org.kermeta.language.sample.cellularautomata.geometry.model/metamodel/geometry.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.kermeta.language.sample.cellularautomata.rules.core.model/metamodel/rules_core.ecore" as core


/**
 * Root for Init
 */
 
CellularAutomataInitialization returns CellularAutomataInitialization:
	{CellularAutomataInitialization}
	(geometry=RegularGeometry)?
	seedRules+=Rule (seedRules+=Rule)*
;


/**
 * From Init
 */

Rule returns core::Rule:
	'init' (filter=AreaFilter)? 'by' '{' evaluatedVal=Conditional '}'
;

AreaFilter returns AreaFilter:
	{AreaFilter}
	areas+=Area (',' areas+=Area)* 
;

Area returns Area:
	'(' (dimensionRanges+=DimensionRange) ',' (dimensionRanges+=DimensionRange) ')'
;

DimensionRange returns DimensionRange:
	(lower =EInt) ('..' (upper =EInt))?
;

LiteralsExpression returns core::IntegerExpression:
	'(' Conditional ')' | PositionLiteral | IntegerLiteral
;


PositionLiteral returns core::IntegerExpression:
	{PositionLiteral}
	'positionOn''['dimensionIndex=EInt']'
;

/**
 * From Geometry
 */
RegularGeometry:
	{RegularGeometry}
	'regularGeometry' neighbors=Neighborhood '{'dimensions+=Dimension  ('x' dimensions+=Dimension)* '}' 
;

Dimension:
	{Dimension}
	extent=EInt (isCircular?='circular')?
;

enum Neighborhood:
Neumann='Neumann' | Moore='Moore';
