/*
* generated by Xtext
*/
grammar InternalInit;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.kermeta.language.sample.cellularautomata.rules.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.kermeta.language.sample.cellularautomata.rules.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.kermeta.language.sample.cellularautomata.rules.services.InitGrammarAccess;

}

@parser::members {
 
 	private InitGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(InitGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleCellularAutomataInitialization
entryRuleCellularAutomataInitialization 
:
{ before(grammarAccess.getCellularAutomataInitializationRule()); }
	 ruleCellularAutomataInitialization
{ after(grammarAccess.getCellularAutomataInitializationRule()); } 
	 EOF 
;

// Rule CellularAutomataInitialization
ruleCellularAutomataInitialization
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCellularAutomataInitializationAccess().getGroup()); }
(rule__CellularAutomataInitialization__Group__0)
{ after(grammarAccess.getCellularAutomataInitializationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRule
entryRuleRule 
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleAccess().getGroup()); }
(rule__Rule__Group__0)
{ after(grammarAccess.getRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGlobalPosition
entryRuleGlobalPosition 
:
{ before(grammarAccess.getGlobalPositionRule()); }
	 ruleGlobalPosition
{ after(grammarAccess.getGlobalPositionRule()); } 
	 EOF 
;

// Rule GlobalPosition
ruleGlobalPosition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGlobalPositionAccess().getGroup()); }
(rule__GlobalPosition__Group__0)
{ after(grammarAccess.getGlobalPositionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCoordinateRange
entryRuleCoordinateRange 
:
{ before(grammarAccess.getCoordinateRangeRule()); }
	 ruleCoordinateRange
{ after(grammarAccess.getCoordinateRangeRule()); } 
	 EOF 
;

// Rule CoordinateRange
ruleCoordinateRange
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCoordinateRangeAccess().getGroup()); }
(rule__CoordinateRange__Group__0)
{ after(grammarAccess.getCoordinateRangeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralsExpression
entryRuleLiteralsExpression 
:
{ before(grammarAccess.getLiteralsExpressionRule()); }
	 ruleLiteralsExpression
{ after(grammarAccess.getLiteralsExpressionRule()); } 
	 EOF 
;

// Rule LiteralsExpression
ruleLiteralsExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralsExpressionAccess().getAlternatives()); }
(rule__LiteralsExpression__Alternatives)
{ after(grammarAccess.getLiteralsExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePositionLiteral
entryRulePositionLiteral 
:
{ before(grammarAccess.getPositionLiteralRule()); }
	 rulePositionLiteral
{ after(grammarAccess.getPositionLiteralRule()); } 
	 EOF 
;

// Rule PositionLiteral
rulePositionLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPositionLiteralAccess().getGroup()); }
(rule__PositionLiteral__Group__0)
{ after(grammarAccess.getPositionLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRegularGeometry
entryRuleRegularGeometry 
:
{ before(grammarAccess.getRegularGeometryRule()); }
	 ruleRegularGeometry
{ after(grammarAccess.getRegularGeometryRule()); } 
	 EOF 
;

// Rule RegularGeometry
ruleRegularGeometry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRegularGeometryAccess().getGroup()); }
(rule__RegularGeometry__Group__0)
{ after(grammarAccess.getRegularGeometryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDimension
entryRuleDimension 
:
{ before(grammarAccess.getDimensionRule()); }
	 ruleDimension
{ after(grammarAccess.getDimensionRule()); } 
	 EOF 
;

// Rule Dimension
ruleDimension
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDimensionAccess().getAlternatives()); }
(rule__Dimension__Alternatives)
{ after(grammarAccess.getDimensionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConditional
entryRuleConditional 
:
{ before(grammarAccess.getConditionalRule()); }
	 ruleConditional
{ after(grammarAccess.getConditionalRule()); } 
	 EOF 
;

// Rule Conditional
ruleConditional
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionalAccess().getAlternatives()); }
(rule__Conditional__Alternatives)
{ after(grammarAccess.getConditionalAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExpression
entryRuleOrExpression 
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
(rule__OrExpression__Group__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualExpression
entryRuleEqualExpression 
:
{ before(grammarAccess.getEqualExpressionRule()); }
	 ruleEqualExpression
{ after(grammarAccess.getEqualExpressionRule()); } 
	 EOF 
;

// Rule EqualExpression
ruleEqualExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualExpressionAccess().getGroup()); }
(rule__EqualExpression__Group__0)
{ after(grammarAccess.getEqualExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression 
:
{ before(grammarAccess.getComparisonExpressionRule()); }
	 ruleComparisonExpression
{ after(grammarAccess.getComparisonExpressionRule()); } 
	 EOF 
;

// Rule ComparisonExpression
ruleComparisonExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonExpressionAccess().getGroup()); }
(rule__ComparisonExpression__Group__0)
{ after(grammarAccess.getComparisonExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddExpression
entryRuleAddExpression 
:
{ before(grammarAccess.getAddExpressionRule()); }
	 ruleAddExpression
{ after(grammarAccess.getAddExpressionRule()); } 
	 EOF 
;

// Rule AddExpression
ruleAddExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAddExpressionAccess().getGroup()); }
(rule__AddExpression__Group__0)
{ after(grammarAccess.getAddExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultExpression
entryRuleMultExpression 
:
{ before(grammarAccess.getMultExpressionRule()); }
	 ruleMultExpression
{ after(grammarAccess.getMultExpressionRule()); } 
	 EOF 
;

// Rule MultExpression
ruleMultExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultExpressionAccess().getGroup()); }
(rule__MultExpression__Group__0)
{ after(grammarAccess.getMultExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression 
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
(rule__UnaryExpression__Alternatives)
{ after(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral 
:
{ before(grammarAccess.getIntegerLiteralRule()); }
	 ruleIntegerLiteral
{ after(grammarAccess.getIntegerLiteralRule()); } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerLiteralAccess().getValAssignment()); }
(rule__IntegerLiteral__ValAssignment)
{ after(grammarAccess.getIntegerLiteralAccess().getValAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEInt
entryRuleEInt 
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEIntAccess().getGroup()); }
(rule__EInt__Group__0)
{ after(grammarAccess.getEIntAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__LiteralsExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralsExpressionAccess().getGroup_0()); }
(rule__LiteralsExpression__Group_0__0)
{ after(grammarAccess.getLiteralsExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getLiteralsExpressionAccess().getPositionLiteralParserRuleCall_1()); }
	rulePositionLiteral
{ after(grammarAccess.getLiteralsExpressionAccess().getPositionLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralsExpressionAccess().getIntegerLiteralParserRuleCall_2()); }
	ruleIntegerLiteral
{ after(grammarAccess.getLiteralsExpressionAccess().getIntegerLiteralParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dimension__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDimensionAccess().getGroup_0()); }
(rule__Dimension__Group_0__0)
{ after(grammarAccess.getDimensionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getDimensionAccess().getGroup_1()); }
(rule__Dimension__Group_1__0)
{ after(grammarAccess.getDimensionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getOrExpressionParserRuleCall_0()); }
	ruleOrExpression
{ after(grammarAccess.getConditionalAccess().getOrExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConditionalAccess().getGroup_1()); }
(rule__Conditional__Group_1__0)
{ after(grammarAccess.getConditionalAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getGroup_1_0_0()); }
(rule__ComparisonExpression__Group_1_0_0__0)
{ after(grammarAccess.getComparisonExpressionAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getComparisonExpressionAccess().getGroup_1_0_1()); }
(rule__ComparisonExpression__Group_1_0_1__0)
{ after(grammarAccess.getComparisonExpressionAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getGroup_1_0_0()); }
(rule__AddExpression__Group_1_0_0__0)
{ after(grammarAccess.getAddExpressionAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getAddExpressionAccess().getGroup_1_0_1()); }
(rule__AddExpression__Group_1_0_1__0)
{ after(grammarAccess.getAddExpressionAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getGroup_1_0_0()); }
(rule__MultExpression__Group_1_0_0__0)
{ after(grammarAccess.getMultExpressionAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getMultExpressionAccess().getGroup_1_0_1()); }
(rule__MultExpression__Group_1_0_1__0)
{ after(grammarAccess.getMultExpressionAccess().getGroup_1_0_1()); }
)

    |(
{ before(grammarAccess.getMultExpressionAccess().getGroup_1_0_2()); }
(rule__MultExpression__Group_1_0_2__0)
{ after(grammarAccess.getMultExpressionAccess().getGroup_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getLiteralsExpressionParserRuleCall_0()); }
	ruleLiteralsExpression
{ after(grammarAccess.getUnaryExpressionAccess().getLiteralsExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup_1()); }
(rule__UnaryExpression__Group_1__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup_2()); }
(rule__UnaryExpression__Group_2__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__CellularAutomataInitialization__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CellularAutomataInitialization__Group__0__Impl
	rule__CellularAutomataInitialization__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CellularAutomataInitialization__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCellularAutomataInitializationAccess().getCellularAutomatatInitializationAction_0()); }
(

)
{ after(grammarAccess.getCellularAutomataInitializationAccess().getCellularAutomatatInitializationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CellularAutomataInitialization__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CellularAutomataInitialization__Group__1__Impl
	rule__CellularAutomataInitialization__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CellularAutomataInitialization__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCellularAutomataInitializationAccess().getGeometryAssignment_1()); }
(rule__CellularAutomataInitialization__GeometryAssignment_1)?
{ after(grammarAccess.getCellularAutomataInitializationAccess().getGeometryAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CellularAutomataInitialization__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CellularAutomataInitialization__Group__2__Impl
	rule__CellularAutomataInitialization__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CellularAutomataInitialization__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCellularAutomataInitializationAccess().getSeedRulesAssignment_2()); }
(rule__CellularAutomataInitialization__SeedRulesAssignment_2)
{ after(grammarAccess.getCellularAutomataInitializationAccess().getSeedRulesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CellularAutomataInitialization__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CellularAutomataInitialization__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CellularAutomataInitialization__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCellularAutomataInitializationAccess().getSeedRulesAssignment_3()); }
(rule__CellularAutomataInitialization__SeedRulesAssignment_3)*
{ after(grammarAccess.getCellularAutomataInitializationAccess().getSeedRulesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Rule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getWhereKeyword_0()); }

	'where' 

{ after(grammarAccess.getRuleAccess().getWhereKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getFilterAssignment_1()); }
(rule__Rule__FilterAssignment_1)?
{ after(grammarAccess.getRuleAccess().getFilterAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__2__Impl
	rule__Rule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getInitValueKeyword_2()); }

	'initValue' 

{ after(grammarAccess.getRuleAccess().getInitValueKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__3__Impl
	rule__Rule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getEqualsSignKeyword_3()); }

	'=' 

{ after(grammarAccess.getRuleAccess().getEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__4__Impl
	rule__Rule__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_4()); }

	'{' 

{ after(grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__5__Impl
	rule__Rule__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getEvaluatedValAssignment_5()); }
(rule__Rule__EvaluatedValAssignment_5)
{ after(grammarAccess.getRuleAccess().getEvaluatedValAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__GlobalPosition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalPosition__Group__0__Impl
	rule__GlobalPosition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalPosition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalPositionAccess().getGlobalPositionAction_0()); }
(

)
{ after(grammarAccess.getGlobalPositionAccess().getGlobalPositionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GlobalPosition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalPosition__Group__1__Impl
	rule__GlobalPosition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalPosition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalPositionAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getGlobalPositionAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GlobalPosition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalPosition__Group__2__Impl
	rule__GlobalPosition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalPosition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalPositionAccess().getCoordinateRangesAssignment_2()); }
(rule__GlobalPosition__CoordinateRangesAssignment_2)
{ after(grammarAccess.getGlobalPositionAccess().getCoordinateRangesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GlobalPosition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalPosition__Group__3__Impl
	rule__GlobalPosition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalPosition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalPositionAccess().getGroup_3()); }
(rule__GlobalPosition__Group_3__0)*
{ after(grammarAccess.getGlobalPositionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GlobalPosition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalPosition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalPosition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalPositionAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getGlobalPositionAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__GlobalPosition__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalPosition__Group_3__0__Impl
	rule__GlobalPosition__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalPosition__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalPositionAccess().getXKeyword_3_0()); }

	'x' 

{ after(grammarAccess.getGlobalPositionAccess().getXKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GlobalPosition__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalPosition__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalPosition__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalPositionAccess().getCoordinateRangesAssignment_3_1()); }
(rule__GlobalPosition__CoordinateRangesAssignment_3_1)?
{ after(grammarAccess.getGlobalPositionAccess().getCoordinateRangesAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CoordinateRange__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CoordinateRange__Group__0__Impl
	rule__CoordinateRange__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CoordinateRange__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCoordinateRangeAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getCoordinateRangeAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CoordinateRange__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CoordinateRange__Group__1__Impl
	rule__CoordinateRange__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CoordinateRange__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCoordinateRangeAccess().getLowerCoordinateAssignment_1()); }
(rule__CoordinateRange__LowerCoordinateAssignment_1)
{ after(grammarAccess.getCoordinateRangeAccess().getLowerCoordinateAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CoordinateRange__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CoordinateRange__Group__2__Impl
	rule__CoordinateRange__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CoordinateRange__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCoordinateRangeAccess().getCommaKeyword_2()); }

	',' 

{ after(grammarAccess.getCoordinateRangeAccess().getCommaKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CoordinateRange__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CoordinateRange__Group__3__Impl
	rule__CoordinateRange__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CoordinateRange__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCoordinateRangeAccess().getUpperCoordinateAssignment_3()); }
(rule__CoordinateRange__UpperCoordinateAssignment_3)
{ after(grammarAccess.getCoordinateRangeAccess().getUpperCoordinateAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CoordinateRange__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CoordinateRange__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CoordinateRange__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCoordinateRangeAccess().getRightSquareBracketKeyword_4()); }

	']' 

{ after(grammarAccess.getCoordinateRangeAccess().getRightSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__LiteralsExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralsExpression__Group_0__0__Impl
	rule__LiteralsExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralsExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralsExpressionAccess().getLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getLiteralsExpressionAccess().getLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralsExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralsExpression__Group_0__1__Impl
	rule__LiteralsExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralsExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralsExpressionAccess().getConditionalParserRuleCall_0_1()); }
	ruleConditional
{ after(grammarAccess.getLiteralsExpressionAccess().getConditionalParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralsExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralsExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralsExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralsExpressionAccess().getRightParenthesisKeyword_0_2()); }

	')' 

{ after(grammarAccess.getLiteralsExpressionAccess().getRightParenthesisKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PositionLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PositionLiteral__Group__0__Impl
	rule__PositionLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositionLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPositionLiteralAccess().getPositionLiteralAction_0()); }
(

)
{ after(grammarAccess.getPositionLiteralAccess().getPositionLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PositionLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PositionLiteral__Group__1__Impl
	rule__PositionLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PositionLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPositionLiteralAccess().getPositionOnKeyword_1()); }

	'positionOn' 

{ after(grammarAccess.getPositionLiteralAccess().getPositionOnKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PositionLiteral__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PositionLiteral__Group__2__Impl
	rule__PositionLiteral__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PositionLiteral__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPositionLiteralAccess().getLeftSquareBracketKeyword_2()); }

	'[' 

{ after(grammarAccess.getPositionLiteralAccess().getLeftSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PositionLiteral__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PositionLiteral__Group__3__Impl
	rule__PositionLiteral__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PositionLiteral__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPositionLiteralAccess().getDimensionIndexAssignment_3()); }
(rule__PositionLiteral__DimensionIndexAssignment_3)
{ after(grammarAccess.getPositionLiteralAccess().getDimensionIndexAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PositionLiteral__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PositionLiteral__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositionLiteral__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPositionLiteralAccess().getRightSquareBracketKeyword_4()); }

	']' 

{ after(grammarAccess.getPositionLiteralAccess().getRightSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__RegularGeometry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegularGeometry__Group__0__Impl
	rule__RegularGeometry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularGeometry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegularGeometryAccess().getRegularGeometryAction_0()); }
(

)
{ after(grammarAccess.getRegularGeometryAccess().getRegularGeometryAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegularGeometry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegularGeometry__Group__1__Impl
	rule__RegularGeometry__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularGeometry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegularGeometryAccess().getRegularGeometryKeyword_1()); }

	'regularGeometry' 

{ after(grammarAccess.getRegularGeometryAccess().getRegularGeometryKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegularGeometry__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegularGeometry__Group__2__Impl
	rule__RegularGeometry__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularGeometry__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegularGeometryAccess().getNeighborsNumberAssignment_2()); }
(rule__RegularGeometry__NeighborsNumberAssignment_2)
{ after(grammarAccess.getRegularGeometryAccess().getNeighborsNumberAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegularGeometry__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegularGeometry__Group__3__Impl
	rule__RegularGeometry__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularGeometry__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegularGeometryAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getRegularGeometryAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegularGeometry__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegularGeometry__Group__4__Impl
	rule__RegularGeometry__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularGeometry__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegularGeometryAccess().getDimensionsAssignment_4()); }
(rule__RegularGeometry__DimensionsAssignment_4)
{ after(grammarAccess.getRegularGeometryAccess().getDimensionsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegularGeometry__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegularGeometry__Group__5__Impl
	rule__RegularGeometry__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularGeometry__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegularGeometryAccess().getGroup_5()); }
(rule__RegularGeometry__Group_5__0)*
{ after(grammarAccess.getRegularGeometryAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegularGeometry__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegularGeometry__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularGeometry__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegularGeometryAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getRegularGeometryAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__RegularGeometry__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegularGeometry__Group_5__0__Impl
	rule__RegularGeometry__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularGeometry__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegularGeometryAccess().getXKeyword_5_0()); }

	'x' 

{ after(grammarAccess.getRegularGeometryAccess().getXKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegularGeometry__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegularGeometry__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularGeometry__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegularGeometryAccess().getDimensionsAssignment_5_1()); }
(rule__RegularGeometry__DimensionsAssignment_5_1)
{ after(grammarAccess.getRegularGeometryAccess().getDimensionsAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Dimension__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dimension__Group_0__0__Impl
	rule__Dimension__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dimension__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDimensionAccess().getDimensionAction_0_0()); }
(

)
{ after(grammarAccess.getDimensionAccess().getDimensionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dimension__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dimension__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dimension__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDimensionAccess().getSizeAssignment_0_1()); }
(rule__Dimension__SizeAssignment_0_1)
{ after(grammarAccess.getDimensionAccess().getSizeAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Dimension__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dimension__Group_1__0__Impl
	rule__Dimension__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dimension__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDimensionAccess().getIsCircularAssignment_1_0()); }
(rule__Dimension__IsCircularAssignment_1_0)
{ after(grammarAccess.getDimensionAccess().getIsCircularAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dimension__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dimension__Group_1__1__Impl
	rule__Dimension__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dimension__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDimensionAccess().getSizeAssignment_1_1()); }
(rule__Dimension__SizeAssignment_1_1)
{ after(grammarAccess.getDimensionAccess().getSizeAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dimension__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dimension__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dimension__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDimensionAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getDimensionAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Conditional__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group_1__0__Impl
	rule__Conditional__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getConditionalAction_1_0()); }
(

)
{ after(grammarAccess.getConditionalAccess().getConditionalAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group_1__1__Impl
	rule__Conditional__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getIfKeyword_1_1()); }

	'if' 

{ after(grammarAccess.getConditionalAccess().getIfKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group_1__2__Impl
	rule__Conditional__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getConditionAssignment_1_2()); }
(rule__Conditional__ConditionAssignment_1_2)
{ after(grammarAccess.getConditionalAccess().getConditionAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group_1__3__Impl
	rule__Conditional__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getLeftCurlyBracketKeyword_1_3()); }

	'{' 

{ after(grammarAccess.getConditionalAccess().getLeftCurlyBracketKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group_1__4__Impl
	rule__Conditional__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getIfTrueExpressionAssignment_1_4()); }
(rule__Conditional__IfTrueExpressionAssignment_1_4)
{ after(grammarAccess.getConditionalAccess().getIfTrueExpressionAssignment_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group_1__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group_1__5__Impl
	rule__Conditional__Group_1__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_1__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getRightCurlyBracketKeyword_1_5()); }

	'}' 

{ after(grammarAccess.getConditionalAccess().getRightCurlyBracketKeyword_1_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group_1__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group_1__6__Impl
	rule__Conditional__Group_1__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_1__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getElseKeyword_1_6()); }

	'else' 

{ after(grammarAccess.getConditionalAccess().getElseKeyword_1_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group_1__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group_1__7__Impl
	rule__Conditional__Group_1__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_1__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getLeftCurlyBracketKeyword_1_7()); }

	'{' 

{ after(grammarAccess.getConditionalAccess().getLeftCurlyBracketKeyword_1_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group_1__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group_1__8__Impl
	rule__Conditional__Group_1__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_1__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getIfFalseExpressionAssignment_1_8()); }
(rule__Conditional__IfFalseExpressionAssignment_1_8)
{ after(grammarAccess.getConditionalAccess().getIfFalseExpressionAssignment_1_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group_1__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group_1__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_1__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getRightCurlyBracketKeyword_1_9()); }

	'}' 

{ after(grammarAccess.getConditionalAccess().getRightCurlyBracketKeyword_1_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__OrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
{ after(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
(rule__OrExpression__Group_1__0)*
{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOrLeftAction_1_0()); }
(

)
{ after(grammarAccess.getOrExpressionAccess().getOrLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__1__Impl
	rule__OrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getVerticalLineKeyword_1_1()); }

	'|' 

{ after(grammarAccess.getOrExpressionAccess().getVerticalLineKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
(rule__OrExpression__RightAssignment_1_2)
{ after(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getEqualExpressionParserRuleCall_0()); }
	ruleEqualExpression
{ after(grammarAccess.getAndExpressionAccess().getEqualExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
(rule__AndExpression__Group_1__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getAndLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getAndLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getAmpersandKeyword_1_1()); }

	'&' 

{ after(grammarAccess.getAndExpressionAccess().getAmpersandKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
(rule__AndExpression__RightAssignment_1_2)
{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EqualExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualExpression__Group__0__Impl
	rule__EqualExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
	ruleComparisonExpression
{ after(grammarAccess.getEqualExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualExpressionAccess().getGroup_1()); }
(rule__EqualExpression__Group_1__0)*
{ after(grammarAccess.getEqualExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualExpression__Group_1__0__Impl
	rule__EqualExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualExpressionAccess().getEqualLeftAction_1_0()); }
(

)
{ after(grammarAccess.getEqualExpressionAccess().getEqualLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualExpression__Group_1__1__Impl
	rule__EqualExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualExpressionAccess().getEqualsSignEqualsSignKeyword_1_1()); }

	'==' 

{ after(grammarAccess.getEqualExpressionAccess().getEqualsSignEqualsSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualExpressionAccess().getRightAssignment_1_2()); }
(rule__EqualExpression__RightAssignment_1_2)
{ after(grammarAccess.getEqualExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ComparisonExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group__0__Impl
	rule__ComparisonExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getAddExpressionParserRuleCall_0()); }
	ruleAddExpression
{ after(grammarAccess.getComparisonExpressionAccess().getAddExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
(rule__ComparisonExpression__Group_1__0)*
{ after(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisonExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1__0__Impl
	rule__ComparisonExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getAlternatives_1_0()); }
(rule__ComparisonExpression__Alternatives_1_0)
{ after(grammarAccess.getComparisonExpressionAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_1()); }
(rule__ComparisonExpression__RightAssignment_1_1)
{ after(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisonExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1_0_0__0__Impl
	rule__ComparisonExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getGreaterLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getComparisonExpressionAccess().getGreaterLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getGreaterThanSignKeyword_1_0_0_1()); }

	'>' 

{ after(grammarAccess.getComparisonExpressionAccess().getGreaterThanSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisonExpression__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1_0_1__0__Impl
	rule__ComparisonExpression__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getLowerLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getComparisonExpressionAccess().getLowerLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getLessThanSignKeyword_1_0_1_1()); }

	'<' 

{ after(grammarAccess.getComparisonExpressionAccess().getLessThanSignKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AddExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group__0__Impl
	rule__AddExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getMultExpressionParserRuleCall_0()); }
	ruleMultExpression
{ after(grammarAccess.getAddExpressionAccess().getMultExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getGroup_1()); }
(rule__AddExpression__Group_1__0)*
{ after(grammarAccess.getAddExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AddExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1__0__Impl
	rule__AddExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getAlternatives_1_0()); }
(rule__AddExpression__Alternatives_1_0)
{ after(grammarAccess.getAddExpressionAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getRightAssignment_1_1()); }
(rule__AddExpression__RightAssignment_1_1)
{ after(grammarAccess.getAddExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AddExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1_0_0__0__Impl
	rule__AddExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getAddLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getAddExpressionAccess().getAddLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getPlusSignKeyword_1_0_0_1()); }

	'+' 

{ after(grammarAccess.getAddExpressionAccess().getPlusSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AddExpression__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1_0_1__0__Impl
	rule__AddExpression__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getMinusLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getAddExpressionAccess().getMinusLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getHyphenMinusKeyword_1_0_1_1()); }

	'-' 

{ after(grammarAccess.getAddExpressionAccess().getHyphenMinusKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group__0__Impl
	rule__MultExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
	ruleUnaryExpression
{ after(grammarAccess.getMultExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getGroup_1()); }
(rule__MultExpression__Group_1__0)*
{ after(grammarAccess.getMultExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1__0__Impl
	rule__MultExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getAlternatives_1_0()); }
(rule__MultExpression__Alternatives_1_0)
{ after(grammarAccess.getMultExpressionAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getRightAssignment_1_1()); }
(rule__MultExpression__RightAssignment_1_1)
{ after(grammarAccess.getMultExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1_0_0__0__Impl
	rule__MultExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getMultLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getMultExpressionAccess().getMultLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getAsteriskKeyword_1_0_0_1()); }

	'*' 

{ after(grammarAccess.getMultExpressionAccess().getAsteriskKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultExpression__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1_0_1__0__Impl
	rule__MultExpression__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getDivLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getMultExpressionAccess().getDivLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getSolidusKeyword_1_0_1_1()); }

	'/' 

{ after(grammarAccess.getMultExpressionAccess().getSolidusKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultExpression__Group_1_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1_0_2__0__Impl
	rule__MultExpression__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getModLeftAction_1_0_2_0()); }
(

)
{ after(grammarAccess.getMultExpressionAccess().getModLeftAction_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group_1_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getPercentSignKeyword_1_0_2_1()); }

	'%' 

{ after(grammarAccess.getMultExpressionAccess().getPercentSignKeyword_1_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1__0__Impl
	rule__UnaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getNotAction_1_0()); }
(

)
{ after(grammarAccess.getUnaryExpressionAccess().getNotAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1__1__Impl
	rule__UnaryExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getExclamationMarkKeyword_1_1()); }

	'!' 

{ after(grammarAccess.getUnaryExpressionAccess().getExclamationMarkKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getTargetAssignment_1_2()); }
(rule__UnaryExpression__TargetAssignment_1_2)
{ after(grammarAccess.getUnaryExpressionAccess().getTargetAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnaryExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_2__0__Impl
	rule__UnaryExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getUMinusAction_2_0()); }
(

)
{ after(grammarAccess.getUnaryExpressionAccess().getUMinusAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_2__1__Impl
	rule__UnaryExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getHyphenMinusKeyword_2_1()); }

	'-' 

{ after(grammarAccess.getUnaryExpressionAccess().getHyphenMinusKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getTargetAssignment_2_2()); }
(rule__UnaryExpression__TargetAssignment_2_2)
{ after(grammarAccess.getUnaryExpressionAccess().getTargetAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EInt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__CellularAutomataInitialization__GeometryAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCellularAutomataInitializationAccess().getGeometryRegularGeometryParserRuleCall_1_0()); }
	ruleRegularGeometry{ after(grammarAccess.getCellularAutomataInitializationAccess().getGeometryRegularGeometryParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CellularAutomataInitialization__SeedRulesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCellularAutomataInitializationAccess().getSeedRulesRuleParserRuleCall_2_0()); }
	ruleRule{ after(grammarAccess.getCellularAutomataInitializationAccess().getSeedRulesRuleParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CellularAutomataInitialization__SeedRulesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCellularAutomataInitializationAccess().getSeedRulesRuleParserRuleCall_3_0()); }
	ruleRule{ after(grammarAccess.getCellularAutomataInitializationAccess().getSeedRulesRuleParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__FilterAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getFilterGlobalPositionParserRuleCall_1_0()); }
	ruleGlobalPosition{ after(grammarAccess.getRuleAccess().getFilterGlobalPositionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__EvaluatedValAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getEvaluatedValConditionalParserRuleCall_5_0()); }
	ruleConditional{ after(grammarAccess.getRuleAccess().getEvaluatedValConditionalParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalPosition__CoordinateRangesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalPositionAccess().getCoordinateRangesCoordinateRangeParserRuleCall_2_0()); }
	ruleCoordinateRange{ after(grammarAccess.getGlobalPositionAccess().getCoordinateRangesCoordinateRangeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalPosition__CoordinateRangesAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalPositionAccess().getCoordinateRangesCoordinateRangeParserRuleCall_3_1_0()); }
	ruleCoordinateRange{ after(grammarAccess.getGlobalPositionAccess().getCoordinateRangesCoordinateRangeParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CoordinateRange__LowerCoordinateAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCoordinateRangeAccess().getLowerCoordinateEIntParserRuleCall_1_0()); }
	ruleEInt{ after(grammarAccess.getCoordinateRangeAccess().getLowerCoordinateEIntParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CoordinateRange__UpperCoordinateAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCoordinateRangeAccess().getUpperCoordinateEIntParserRuleCall_3_0()); }
	ruleEInt{ after(grammarAccess.getCoordinateRangeAccess().getUpperCoordinateEIntParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PositionLiteral__DimensionIndexAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPositionLiteralAccess().getDimensionIndexEIntParserRuleCall_3_0()); }
	ruleEInt{ after(grammarAccess.getPositionLiteralAccess().getDimensionIndexEIntParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegularGeometry__NeighborsNumberAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegularGeometryAccess().getNeighborsNumberEIntParserRuleCall_2_0()); }
	ruleEInt{ after(grammarAccess.getRegularGeometryAccess().getNeighborsNumberEIntParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegularGeometry__DimensionsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegularGeometryAccess().getDimensionsDimensionParserRuleCall_4_0()); }
	ruleDimension{ after(grammarAccess.getRegularGeometryAccess().getDimensionsDimensionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegularGeometry__DimensionsAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegularGeometryAccess().getDimensionsDimensionParserRuleCall_5_1_0()); }
	ruleDimension{ after(grammarAccess.getRegularGeometryAccess().getDimensionsDimensionParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dimension__SizeAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDimensionAccess().getSizeEIntParserRuleCall_0_1_0()); }
	ruleEInt{ after(grammarAccess.getDimensionAccess().getSizeEIntParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dimension__IsCircularAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDimensionAccess().getIsCircularLeftParenthesisKeyword_1_0_0()); }
(
{ before(grammarAccess.getDimensionAccess().getIsCircularLeftParenthesisKeyword_1_0_0()); }

	'(' 

{ after(grammarAccess.getDimensionAccess().getIsCircularLeftParenthesisKeyword_1_0_0()); }
)

{ after(grammarAccess.getDimensionAccess().getIsCircularLeftParenthesisKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dimension__SizeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDimensionAccess().getSizeEIntParserRuleCall_1_1_0()); }
	ruleEInt{ after(grammarAccess.getDimensionAccess().getSizeEIntParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__ConditionAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getConditionConditionalParserRuleCall_1_2_0()); }
	ruleConditional{ after(grammarAccess.getConditionalAccess().getConditionConditionalParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__IfTrueExpressionAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getIfTrueExpressionConditionalParserRuleCall_1_4_0()); }
	ruleConditional{ after(grammarAccess.getConditionalAccess().getIfTrueExpressionConditionalParserRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__IfFalseExpressionAssignment_1_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getIfFalseExpressionConditionalParserRuleCall_1_8_0()); }
	ruleConditional{ after(grammarAccess.getConditionalAccess().getIfFalseExpressionConditionalParserRuleCall_1_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
	ruleAndExpression{ after(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightEqualExpressionParserRuleCall_1_2_0()); }
	ruleEqualExpression{ after(grammarAccess.getAndExpressionAccess().getRightEqualExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0()); }
	ruleComparisonExpression{ after(grammarAccess.getEqualExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getRightAddExpressionParserRuleCall_1_1_0()); }
	ruleAddExpression{ after(grammarAccess.getComparisonExpressionAccess().getRightAddExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getRightMultExpressionParserRuleCall_1_1_0()); }
	ruleMultExpression{ after(grammarAccess.getAddExpressionAccess().getRightMultExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getRightUnaryExpressionParserRuleCall_1_1_0()); }
	ruleUnaryExpression{ after(grammarAccess.getMultExpressionAccess().getRightUnaryExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__TargetAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getTargetLiteralsExpressionParserRuleCall_1_2_0()); }
	ruleLiteralsExpression{ after(grammarAccess.getUnaryExpressionAccess().getTargetLiteralsExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__TargetAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getTargetLiteralsExpressionParserRuleCall_2_2_0()); }
	ruleLiteralsExpression{ after(grammarAccess.getUnaryExpressionAccess().getTargetLiteralsExpressionParserRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__ValAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getValEIntParserRuleCall_0()); }
	ruleEInt{ after(grammarAccess.getIntegerLiteralAccess().getValEIntParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


